// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DataAccess.Models;

public partial class ReToContext : DbContext
{
    public ReToContext(DbContextOptions<ReToContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Option> Options { get; set; }

    public virtual DbSet<ShortUrl> ShortUrls { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAccount> UserAccounts { get; set; }

    public virtual DbSet<UserLogin> UserLogins { get; set; }

    public virtual DbSet<UserPasswordLog> UserPasswordLogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Option>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("應用程式參數"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.OptionName)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("參數名稱");
            entity.Property(e => e.OptionValue)
                .IsUnicode(false)
                .HasComment("參數值");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UpdaterId)
                .HasComment("最後更新者識別碼")
                .HasColumnName("UpdaterID");

            entity.HasOne(d => d.Updater).WithMany(p => p.Options)
                .HasForeignKey(d => d.UpdaterId)
                .HasConstraintName("FK_Options_Users");
        });

        modelBuilder.Entity<ShortUrl>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Urls");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.ClientIp)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasComment("客戶端 IP 位置")
                .HasColumnName("ClientIP");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt)
                .HasComment("刪除時間")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpireAt)
                .HasComment("有效期限")
                .HasColumnType("datetime");
            entity.Property(e => e.IsEnabled)
                .HasDefaultValue(true)
                .HasComment("是否啟用");
            entity.Property(e => e.OriginalUrl)
                .IsRequired()
                .IsUnicode(false)
                .HasComment("原始網址");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.ShortCode)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("短網址代碼");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UserAgent)
                .IsRequired()
                .IsUnicode(false)
                .HasComment("客戶端代理程式");
            entity.Property(e => e.UserId)
                .HasComment("使用者識別碼")
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.ShortUrls)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_ShortUrls_Users");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("使用者"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt)
                .HasComment("刪除時間")
                .HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("電子信箱");
            entity.Property(e => e.IsEmailVerified).HasComment("是否完成信箱驗證");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("名稱");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.User)
                .HasForeignKey<User>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_UserAccounts");
        });

        modelBuilder.Entity<UserAccount>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("使用者帳號"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.DeletedAt)
                .HasComment("刪除時間")
                .HasColumnType("datetime");
            entity.Property(e => e.IsEnabled)
                .HasDefaultValue(true)
                .HasComment("是否啟用");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("密碼");
            entity.Property(e => e.PasswordExpireAt)
                .HasComment("密碼有效期限")
                .HasColumnType("datetime");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("帳號");
        });

        modelBuilder.Entity<UserLogin>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("使用者登入記錄"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.ClientIp)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasComment("客戶端 IP 位置")
                .HasColumnName("ClientIP");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.ExpireAt)
                .HasComment("有效期限")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRevoked).HasComment("是否作廢登入");
            entity.Property(e => e.IsSuccessful).HasComment("是否成功登入");
            entity.Property(e => e.LoginTime)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("登入時間")
                .HasColumnType("datetime");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UserAgent)
                .IsRequired()
                .IsUnicode(false)
                .HasComment("客戶端代理程式");
            entity.Property(e => e.UserId)
                .HasComment("使用者識別碼")
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.UserLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserLogins_UserAccounts");
        });

        modelBuilder.Entity<UserPasswordLog>(entity =>
        {
            entity.ToTable(tb => tb.HasComment("使用者密碼記錄"));

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())")
                .HasComment("唯一識別碼")
                .HasColumnName("ID");
            entity.Property(e => e.ChangeTime)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("變更時間")
                .HasColumnType("datetime");
            entity.Property(e => e.ClientIp)
                .IsRequired()
                .HasMaxLength(45)
                .IsUnicode(false)
                .HasComment("客戶端 IP 位置")
                .HasColumnName("ClientIP");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(sysutcdatetime())")
                .HasComment("建立時間")
                .HasColumnType("datetime");
            entity.Property(e => e.OriginalPassword)
                .IsRequired()
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("原始密碼");
            entity.Property(e => e.SequentialId)
                .ValueGeneratedOnAdd()
                .HasComment("流水編號")
                .HasColumnName("SequentialID");
            entity.Property(e => e.UpdatedAt)
                .HasComment("最後更新時間")
                .HasColumnType("datetime");
            entity.Property(e => e.UserAgent)
                .IsRequired()
                .IsUnicode(false)
                .HasComment("客戶端代理程式");
            entity.Property(e => e.UserId)
                .HasComment("使用者識別碼")
                .HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.UserPasswordLogs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserPasswordLogs_UserAccounts");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}